#!/usr/bin/env python3 
# -*- coding: utf-8 -*- 
""" 

@author: surajmarla
""" 
import math 

def clean_text(txt): 
        '''takes a string of text txt as a parameter and returns a list 
        containing the words in txt after it has been “cleaned”.''' 
        txt = txt.lower() 
        for symbol in """.,?"'!;:""": 
                txt = txt.replace(symbol, ' ') 
        txt = txt.split() 
        return txt 

def stem(s): 
    '''returns the stem - the root part of the word, which excludes any prefixes and suffixes. - of s'''
    if len(s) > 4 and s[-3:] == 'ing': 
        if len(s[:-3]) > 3:
            s = s[:-4] 
        else: 
            s = s[:-3] 
        
    elif len(s) > 2 and s[-2:] == 'es': 
         s = s[:-2] 
    elif len(s) > 1 and s[-1] == 'y': 
         s = s[:-1] + 'i'    
    
    elif len(s) > 3 and s[-3:] == 'ers':
        s = s[:-3] 
        
    elif len(s) > 1 and s[-1] == 's': 
        s = s[:-1] 
    
    elif len(s) > 2 and s[-2:] == 'er':
       s = s[:-2] 
        
    elif len(s) > 3 and s[-1] == 'e':
        s = s[:-1] 
        
    elif len(s) > 3 and s[-3:] == 'ful':
        s = s[:-3] 
        
    elif len(s) > 4 and s[-4:] == 'ness': 
        s = s[:-4] 
    
    elif len(s) > 4 and s[-4:] == 'less': 
        s = s[:-4] 
    
    elif len(s) > 4 and s[-4:] == 'ment':
        s = s[:-4] 
        
    else: 
         s 
        
    return s

def compare_dictionaries(d1, d2):
    '''takes two feature dictionaries d1 and d2 as inputs, and it should compute
    and return their log similarity score'''
    if d1 == {}:
        return -50 
    else: 
        score = 0 
        total = 0
        for key in d1: 
            total += d1[key] 
    
        for key in d2: 
            if key in d1: 
                probability = d1[key] / total 
                score += d2[key] * math.log(probability)
                
            else: 
                score += d2[key] * math.log(.5/total) 
        return score 




class TextModel: 
    def __init__(self, model_name):
        '''that constructs a new TextModel object by accepting a string 
        model_name as a parameter''' 
        self.name = model_name 
        self.words = {} 
        self.word_lengths = {} 
        self.stems = {} 
        self.sentence_lengths = {} 
        self.punctuations = {} 
       
    def __repr__(self):
        """Return a string representation of the TextModel."""
        s = 'text model name: ' + self.name + '\n'
        s += '  number of words: ' + str(len(self.words)) + '\n'
        s += '  number of word lengths: ' + str(len(self.word_lengths)) + '\n'
        s += '  number of stems: ' + str(len(self.stems)) + '\n'
        s += '  number of sentence lengths: ' + str(len(self.sentence_lengths)) + '\n'
        s += '  number of punctuations: ' + str(len(self.punctuations)) + '\n'
        return s 


    def add_string(self,s): 
        '''Analyzes the string txt and adds its pieces to all of the dictionaries 
        in this text model.''' 
        count = 1
        for x in s:  
           if x == ' ': 
               count += 1 
        
           elif x in '?.!' and count > 0: 
               if count in self.sentence_lengths:
                   self.sentence_lengths[count] += 1 
               else: 
                   self.sentence_lengths[count] = 1 
               count = 0 
            
        word_list = clean_text(s)  
        for w in word_list: 
            if w in self.words:
                self.words[w] += 1 
            else: 
                self.words[w] = 1 
                
            length = len(w) 
            if length in self.word_lengths: 
                self.word_lengths[length] += 1 
            else: 
                self.word_lengths[length] = 1 
            
            stem1 = stem(w) 
            if stem1 in self.stems:
                self.stems[stem1] += 1
            else: 
                self.stems[stem1] = 1 
        
        punctuation_marks = {'.', ',', '?', '!', ';', ':', '-', '"', "'"}
        for char in s: 
            if char in punctuation_marks: 
                if char in self.punctuations:
                     self.punctuations[char] += 1 
                else:
                     self.punctuations[char] = 1    
     
                
    def add_file(self, filename): 
        '''adds all of the text in the file identified by filename to the model.'''
        f = open(filename, 'r', encoding='utf8', errors='ignore') 
        file = f.read()
        f.close() 
        self.add_string(file) 
        
        
    def save_model(self): 
        '''saves the TextModel object self by writing its various feature 
        dictionaries to files'''
        words1 = self.name + '_' + 'words'
        word_lengths1 = self.name + '_' + 'word_lengths' 
        word_stems = self.name + '_' + 'stems'
        sentence_length1 = self.name + '_' + 'sentence_lengths' 
        word_punctuation = self.name + '_' + 'punctuations'
        
        
        f = open(words1, 'w') 
        f.write(str(self.words))
        f.close()
    
        f = open(word_lengths1, 'w') 
        f.write(str(self.word_lengths))
        f.close() 
        
        f = open(word_stems, 'w')
        f.write(str(self.stems))
        f.close()
        
        f = open(sentence_length1, 'w')
        f.write(str(self.sentence_lengths))
        f.close()
        
        f = open(word_punctuation, 'w')
        f.write(str(self.punctuations))
        f.close() 
        
    
    def read_model(self): 
        '''reads the stored dictionaries for the called TextModel object from 
        their files and assigns them to the attributes of the called TextModel'''
        
        words1 = self.name + '_' + 'words'
        word_lengths1 = self.name + '_' + 'word_lengths'
        word_stems = self.name + '_' + 'stems'
        sentence_length1 = self.name + '_' + 'sentence_lengths' 
        word_punctuation = self.name + '_' + 'punctuations'
        
        f = open(words1, 'r') 
        d_str = f.read() 
        f.close() 
        self.words = dict(eval(d_str))  
        
        f = open(word_lengths1, 'r') 
        d_str = f.read() 
        f.close() 
        self.word_lengths = dict(eval(d_str))  
        
        f = open(word_stems, 'r') 
        d_str = f.read() 
        f.close() 
        self.stems = dict(eval(d_str)) 
        
        f = open(sentence_length1, 'r')
        d_str = f.read() 
        f.close() 
        self.sentence_lengths = dict(eval(d_str)) 
        
        f = open(word_punctuation, 'r')
        d_str = f.read() 
        f.close() 
        self.punctuations = dict(eval(d_str)) 
        
        
    def similarity_scores(self, other): 
        '''computes and returns a list of log similarity scores measuring the 
        similarity of self and other – one score for each type of feature'''
        word_score = compare_dictionaries(other.words, self.words)
        wordlengths_score = compare_dictionaries(other.word_lengths, self.word_lengths)
        stems_score = compare_dictionaries(other.stems, self.stems)
        sentencelengths_score = compare_dictionaries(other.sentence_lengths, self.sentence_lengths)
        punctuations_score = compare_dictionaries(other.punctuations, self.punctuations) 
        return [word_score, wordlengths_score, stems_score, sentencelengths_score, punctuations_score]
    
    
    def classify(self, source1, source2): 
        '''compares the called TextModel object (self) to two other “source” 
        TextModel objects and determines which of the other TextModels is the more 
        likely source of the called TextModel'''
        scores1 = self.similarity_scores(source1) 
        scores2 = self.similarity_scores(source2) 
        print('score for ' + source1.name + ': ' + str(scores1))
        print('score for ' + source2.name + ': ' + str(scores2)) 
        weighted_sum1 = 10 * scores1[0] + 5 * scores1[1] + 7 * scores1[2] + 4 * scores1[3] + 9 * scores1[4] 
        weighted_sum2 = 10 * scores2[0] + 5 * scores2[1] + 7 * scores2[2] + 4 * scores2[3] + 9 * scores2[4] 
        if weighted_sum1 > weighted_sum2: 
            print(self.name + ' is more likely to have come from ' +  source1.name) 
        else:
            print(self.name + ' is more likely to have come from ' +  source2.name) 


        
        
def run_tests():
    """ test for my four sets of source texts and comparison texts """
    source1 = TextModel('rowling')
    source1.add_file('rowling.txt')

    source2 = TextModel('shakespeare')
    source2.add_file('shakespeare.txt')

    new1 = TextModel('shakespeare mystery')
    new1.add_file('shakespeare_mystery.txt')
    new1.classify(source1, source2)
    
    source1 = TextModel('HIMYM')
    source1.add_file('HIMYM.txt')

    source2 = TextModel('Friends')
    source2.add_file('Friends.txt') 

    new1 = TextModel('Modern Family')
    new1.add_file('Modern_Family.txt')
    new1.classify(source1, source2)
    
    source1 = TextModel('New York Times')
    source1.add_file('NYT_article.txt')

    source2 = TextModel('CNN')
    source2.add_file('CNN_article.txt')

    new1 = TextModel('BU Today') 
    new1.add_file('BU_Today.txt') 
    new1.classify(source1, source2) 
    
    source1 = TextModel('Op-Ed from USA Today')
    source1.add_file('OpEd_Usa_Today.txt') 

    source2 = TextModel('Op-Ed from Washington Post')
    source2.add_file('OpEd_Washington_Post.txt')

    new1 = TextModel('wr120 Op-Ed') 
    new1.add_file('OpEd_wr120.txt') 
    new1.classify(source1, source2) 

def test():
    """ tests for classify method with sentences as sources of text """
    source1 = TextModel('source1')
    source1.add_string('It is interesting that she is interested.')

    source2 = TextModel('source2')
    source2.add_string('I am very, very excited about this!')

    mystery = TextModel('mystery')
    mystery.add_string('Is he interested? No, but I am.')
    mystery.classify(source1, source2)


    
    
    

        
        
      
            
        
        
        
    
           
    
        
